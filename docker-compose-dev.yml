version: '3'
services:
  chat-server-1:
    container_name: "chat-server-1"
    build:
      context: .
      dockerfile: DockerfileChatServer
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - CONSUMER_GROUP_ID=cg1
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  chat-server-app-2:
    container_name: "chat-server-2"
    build:
      context: .
      dockerfile: DockerfileChatServer
    ports:
      - 8081:8081
    environment:
      - PORT=8081
      - CONSUMER_GROUP_ID=cg2
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  message-processor:
    container_name: "message-processor"
    build:
      context: .
      dockerfile: DockerfileMessageProcessor
    ports:
      - 7080:7080
    environment:
      - PORT=7080
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  command-api:
    container_name: "command-api"
    build:
      context: .
      dockerfile: DockerfileCommandApi
    ports:
      - 8180:8180
    environment:
      - PORT=8180
    depends_on:
      - mongodb

  query-api:
    container_name: "query-api"
    build:
      context: .
      dockerfile: DockerfileQueryApi
    ports:
      - 8280:8280
    environment:
      - PORT=8280
    depends_on:
      - mongodb

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootusername
      - MONGO_INITDB_ROOT_PASSWORD=rootpassword
      - MONGO_INITDB_DATABASE=mydb

  nginx:
    container_name: "nginx"
    image: nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app-1
      - app-2

  zookeeper:
    container_name: "zookeeper"
    image: bitnami/zookeeper:3.7
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka1:
    container_name: "kafka1"
    image: bitnami/kafka:3
    ports:
      - '9093:9093'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka1:9092,EXTERNAL://kafka1:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
  kafka2:
    container_name: "kafka2"
    image: bitnami/kafka:3
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka2:9092,EXTERNAL://kafka2:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
  kafka3:
    container_name: "kafka3"
    image: bitnami/kafka:3
    ports:
      - '9095:9095'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka3:9092,EXTERNAL://kafka3:9095
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: "kafkadrop"
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka1:9092"
    depends_on:
      - kafka1
      - kafka2
      - kafka3

